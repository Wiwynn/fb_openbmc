From 265461a6389572a79c5d9abad630eed8dd7657bf Mon Sep 17 00:00:00 2001
From: RickyWu-wiwynn <ricky_cx_wu@wiwynn.com>
Date: Fri, 15 Mar 2024 18:38:41 +0800
Subject: [PATCH] spi: npcm-pspi: Handle the rx data when spi transfer set
 rx_buf

Handle the rx data when spi transfer set rx_buf.

Don't pollute sender's spi transfer data since it may re-use the
same data pointer and change the transfer length. (ex: tpm-spi)

Signed-off-by: cpchiang <cpchiang1@nuvoton.com>
---
 drivers/spi/spi-npcm-pspi.c | 68 ++++++++++++++++++++++++++++++++-----
 1 file changed, 59 insertions(+), 9 deletions(-)

diff --git a/drivers/spi/spi-npcm-pspi.c b/drivers/spi/spi-npcm-pspi.c
index 7f2e4d1b0d43..0846ac8355b4 100644
--- a/drivers/spi/spi-npcm-pspi.c
+++ b/drivers/spi/spi-npcm-pspi.c
@@ -160,6 +160,7 @@ static void npcm_pspi_setup_transfer(struct spi_device *spi,
 				     struct spi_transfer *t)
 {
 	struct npcm_pspi *priv = spi_master_get_devdata(spi->master);
+	u8 bits_per_word = 8;
 
 	priv->tx_buf = t->tx_buf;
 	priv->rx_buf = t->rx_buf;
@@ -175,12 +176,12 @@ static void npcm_pspi_setup_transfer(struct spi_device *spi,
 	 * If transfer is even length, and 8 bits per word transfer,
 	 * then implement 16 bits-per-word transfer.
 	 */
-	if (priv->bits_per_word == 8 && !(t->len & 0x1))
-		t->bits_per_word = 16;
+	if (!(t->len & 0x1))
+		bits_per_word = 16;
 
-	if (!priv->is_save_param || priv->bits_per_word != t->bits_per_word) {
-		npcm_pspi_set_transfer_size(priv, t->bits_per_word);
-		priv->bits_per_word = t->bits_per_word;
+	if (!priv->is_save_param || priv->bits_per_word != bits_per_word) {
+		npcm_pspi_set_transfer_size(priv, bits_per_word);
+		priv->bits_per_word = bits_per_word;
 	}
 
 	if (!priv->is_save_param || priv->speed_hz != t->speed_hz) {
@@ -192,6 +193,25 @@ static void npcm_pspi_setup_transfer(struct spi_device *spi,
 		priv->is_save_param = true;
 }
 
+static void npcm_pspi_dummy_send(struct npcm_pspi *priv)
+{
+	int wsize;
+
+	wsize = bytes_per_word(priv->bits_per_word);
+
+	switch (wsize) {
+	case 1:
+		iowrite8(0x0, NPCM_PSPI_DATA + priv->base);
+		break;
+	case 2:
+		iowrite16(0x0, NPCM_PSPI_DATA + priv->base);
+		break;
+	default:
+		WARN_ON_ONCE(1);
+		return;
+	}
+}
+
 static void npcm_pspi_send(struct npcm_pspi *priv)
 {
 	int wsize;
@@ -219,6 +239,25 @@ static void npcm_pspi_send(struct npcm_pspi *priv)
 	}
 }
 
+static void npcm_pspi_dummy_recv(struct npcm_pspi *priv)
+{
+	int rsize;
+
+	rsize = bytes_per_word(priv->bits_per_word);
+
+	switch (rsize) {
+	case 1:
+		ioread8(priv->base + NPCM_PSPI_DATA);
+		break;
+	case 2:
+		ioread16(priv->base + NPCM_PSPI_DATA);
+		break;
+	default:
+		WARN_ON_ONCE(1);
+		return;
+	};
+}
+
 static void npcm_pspi_recv(struct npcm_pspi *priv)
 {
 	int rsize;
@@ -303,7 +342,11 @@ static irqreturn_t npcm_pspi_handler(int irq, void *dev_id)
 
 	if (priv->tx_buf) {
 		if (stat & NPCM_PSPI_STAT_RBF) {
-			ioread8(NPCM_PSPI_DATA + priv->base);
+			if (priv->rx_buf && priv->rx_bytes)
+				npcm_pspi_recv(priv);
+			else
+				npcm_pspi_dummy_recv(priv);
+
 			if (priv->tx_bytes == 0) {
 				npcm_pspi_disable(priv);
 				complete(&priv->xfer_done);
@@ -311,9 +354,12 @@ static irqreturn_t npcm_pspi_handler(int irq, void *dev_id)
 			}
 		}
 
-		if ((stat & NPCM_PSPI_STAT_BSY) == 0)
-			if (priv->tx_bytes)
+		if ((stat & NPCM_PSPI_STAT_BSY) == 0) {
+			if (priv->tx_bytes) {
 				npcm_pspi_send(priv);
+				return IRQ_HANDLED;
+			}
+		}
 	}
 
 	if (priv->rx_buf) {
@@ -331,7 +377,7 @@ static irqreturn_t npcm_pspi_handler(int irq, void *dev_id)
 		}
 
 		if (((stat & NPCM_PSPI_STAT_BSY) == 0) && !priv->tx_buf)
-			iowrite8(0x0, NPCM_PSPI_DATA + priv->base);
+			npcm_pspi_dummy_send(priv);
 	}
 
 	return IRQ_HANDLED;
@@ -354,6 +400,7 @@ static int npcm_pspi_probe(struct platform_device *pdev)
 	priv = spi_master_get_devdata(master);
 	priv->master = master;
 	priv->is_save_param = false;
+	priv->bits_per_word = 8;
 
 	priv->base = devm_platform_ioremap_resource(pdev, 0);
 	if (IS_ERR(priv->base)) {
@@ -414,6 +461,9 @@ static int npcm_pspi_probe(struct platform_device *pdev)
 	/* set to default clock rate */
 	npcm_pspi_set_baudrate(priv, NPCM_PSPI_DEFAULT_CLK);
 
+	/* set to default data interface mode */
+	npcm_pspi_set_transfer_size(priv, priv->bits_per_word);
+
 	ret = devm_spi_register_master(&pdev->dev, master);
 	if (ret)
 		goto out_disable_clk;
-- 
2.25.1

